using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace SimplePool
{
	public enum PoolableStatus
	{
		/// <summary>
		/// The instance is dormant in the pool and ready to be used.
		/// </summary>
		Available,
		/// <summary>
		/// The instance is currently in use.
		/// </summary>
		InUse
	}

	public interface IPool
	{
		/// <summary>
		/// Specifies if the pool, upon a <see cref="GetInstance"/> request, can create a new instance when no available ones are left.
		/// </summary>
		bool AutoAddInstances { get; set; }
		/// <summary>
		/// Total number of currently available instances.
		/// </summary>
		int AvailableInstancesCount { get; }
		/// <summary>
		/// Total number of instances the pool is managing.
		/// </summary>
		int Count { get; }
		/// <summary>
		/// Total number of instances currently in use.
		/// </summary>
		int InUseCount { get; }

		/// <summary>
		/// Destroys all the connected instances and clears the pool.
		/// </summary>
		void Clear();
		/// <summary>
		/// Creates the given amount of instances and marks them as available.
		/// </summary>
		/// <param name="amount">The amount of instances to create.</param>
		/// <param name="originalParent">Optional parameter to specify the that the generated instance will use as original parent.</param>
		void GenerateAvailableInstances(int amount, Transform originalParent = null);
		/// <summary>
		/// Returns all the instances currently in use in the pool.
		/// </summary>
		void ReturnAllInUseInstances();
		/// <summary>
		/// Returns the passed instance to the pool so to consider it as available.
		/// </summary>
		/// <param name="instance">The instance to return to the pool.</param>
		void ReturnInstance(IPoolable instance);
	}

	public interface IPool<T> : IPool where T : IPoolable
	{
		/// <summary>
		/// Returns an available instance, <c>null</c> if none are left and <see cref="AutoAddInstances"/> is <c>false</c>.
		/// </summary>
		/// <param name="autogeneratedInstanceOriginalParent">Optional paramenter to specify the <see cref="Transform"/> that the eventual auto generated instance will use as original parent. <seealso cref="IPoolable.SetOriginalParent(Transform)"/>.</param>
		/// <returns>An available instance, <c>null</c> if none are left and <see cref="AutoAddInstances"/> is <c>false</c>.</returns>
		T GetInstance(Transform autogeneratedInstanceOriginalParent = null);
		/// <summary>
		/// <para>Returns shallow copy of the list containing all the instances currrently in use.</para>
		/// <para>The list passed will be filled with the references of the instances in use: memory allocation free !! Enjoy :)</para>
		/// </summary>
		/// <param name="inUseShallow">The list of all the instances currently in use.</param>
		void GetInUseInstances(List<T> inUseShallow);
		/// <summary>
		/// Returns the current <see cref="PoolableStatus"/> of a given instance.
		/// </summary>
		/// <param name="instance">The instance to check.</param>
		/// <returns>The current <see cref="PoolableStatus"/> of the given instance.</returns>
		PoolableStatus GetInstanceCurrentStatus(T instance);
		/// <summary>
		/// <para>Returns the passed instance to the pool so to consider it as available.</para>
		/// </summary>
		/// <param name="instance">The instance to return to the pool.</param>
		void ReturnInstance(T instance);
	}
}
